/* lxpanel2.h generated by valac 0.16.0, the Vala compiler, do not modify */


#ifndef __LXPANEL2_H__
#define __LXPANEL2_H__

#include <glib.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <gtk/gtk.h>
#include <libwnck/libwnck.h>
#include <pango/pango.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <gdk/gdk.h>
#include <float.h>
#include <math.h>

G_BEGIN_DECLS


#define LXPANEL_TYPE_LXPANEL (lxpanel_lxpanel_get_type ())
#define LXPANEL_LXPANEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LXPANEL_TYPE_LXPANEL, LxpanelLxpanel))
#define LXPANEL_LXPANEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LXPANEL_TYPE_LXPANEL, LxpanelLxpanelClass))
#define LXPANEL_IS_LXPANEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LXPANEL_TYPE_LXPANEL))
#define LXPANEL_IS_LXPANEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LXPANEL_TYPE_LXPANEL))
#define LXPANEL_LXPANEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LXPANEL_TYPE_LXPANEL, LxpanelLxpanelClass))

typedef struct _LxpanelLxpanel LxpanelLxpanel;
typedef struct _LxpanelLxpanelClass LxpanelLxpanelClass;
typedef struct _LxpanelLxpanelPrivate LxpanelLxpanelPrivate;

#define LXPANEL_TYPE_PANEL (lxpanel_panel_get_type ())
#define LXPANEL_PANEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LXPANEL_TYPE_PANEL, LxpanelPanel))
#define LXPANEL_PANEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LXPANEL_TYPE_PANEL, LxpanelPanelClass))
#define LXPANEL_IS_PANEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LXPANEL_TYPE_PANEL))
#define LXPANEL_IS_PANEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LXPANEL_TYPE_PANEL))
#define LXPANEL_PANEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LXPANEL_TYPE_PANEL, LxpanelPanelClass))

typedef struct _LxpanelPanel LxpanelPanel;
typedef struct _LxpanelPanelClass LxpanelPanelClass;
typedef struct _LxpanelPanelPrivate LxpanelPanelPrivate;

#define LXPANEL_PANEL_TYPE_BACKGROUND_MODE (lxpanel_panel_background_mode_get_type ())
typedef struct _GMarkupDomNode GMarkupDomNode;

#define LXPANEL_TYPE_APPLET (lxpanel_applet_get_type ())
#define LXPANEL_APPLET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LXPANEL_TYPE_APPLET, LxpanelApplet))
#define LXPANEL_IS_APPLET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LXPANEL_TYPE_APPLET))
#define LXPANEL_APPLET_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), LXPANEL_TYPE_APPLET, LxpanelAppletIface))

typedef struct _LxpanelApplet LxpanelApplet;
typedef struct _LxpanelAppletIface LxpanelAppletIface;
typedef struct _LxpanelAppletInfo LxpanelAppletInfo;

#define LXPANEL_TYPE_APPLET_MODULE (lxpanel_applet_module_get_type ())
#define LXPANEL_APPLET_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LXPANEL_TYPE_APPLET_MODULE, LxpanelAppletModule))
#define LXPANEL_APPLET_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LXPANEL_TYPE_APPLET_MODULE, LxpanelAppletModuleClass))
#define LXPANEL_IS_APPLET_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LXPANEL_TYPE_APPLET_MODULE))
#define LXPANEL_IS_APPLET_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LXPANEL_TYPE_APPLET_MODULE))
#define LXPANEL_APPLET_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LXPANEL_TYPE_APPLET_MODULE, LxpanelAppletModuleClass))

typedef struct _LxpanelAppletModule LxpanelAppletModule;
typedef struct _LxpanelAppletModuleClass LxpanelAppletModuleClass;

#define LXPANEL_TYPE_BUTTON (lxpanel_button_get_type ())
#define LXPANEL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LXPANEL_TYPE_BUTTON, LxpanelButton))
#define LXPANEL_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LXPANEL_TYPE_BUTTON, LxpanelButtonClass))
#define LXPANEL_IS_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LXPANEL_TYPE_BUTTON))
#define LXPANEL_IS_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LXPANEL_TYPE_BUTTON))
#define LXPANEL_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LXPANEL_TYPE_BUTTON, LxpanelButtonClass))

typedef struct _LxpanelButton LxpanelButton;
typedef struct _LxpanelButtonClass LxpanelButtonClass;
typedef struct _LxpanelButtonPrivate LxpanelButtonPrivate;

#define LXPANEL_TYPE_MENU_BUTTON (lxpanel_menu_button_get_type ())
#define LXPANEL_MENU_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LXPANEL_TYPE_MENU_BUTTON, LxpanelMenuButton))
#define LXPANEL_MENU_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LXPANEL_TYPE_MENU_BUTTON, LxpanelMenuButtonClass))
#define LXPANEL_IS_MENU_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LXPANEL_TYPE_MENU_BUTTON))
#define LXPANEL_IS_MENU_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LXPANEL_TYPE_MENU_BUTTON))
#define LXPANEL_MENU_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LXPANEL_TYPE_MENU_BUTTON, LxpanelMenuButtonClass))

typedef struct _LxpanelMenuButton LxpanelMenuButton;
typedef struct _LxpanelMenuButtonClass LxpanelMenuButtonClass;
typedef struct _LxpanelMenuButtonPrivate LxpanelMenuButtonPrivate;

#define LXPANEL_TYPE_DRAWER (lxpanel_drawer_get_type ())
#define LXPANEL_DRAWER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LXPANEL_TYPE_DRAWER, LxpanelDrawer))
#define LXPANEL_DRAWER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LXPANEL_TYPE_DRAWER, LxpanelDrawerClass))
#define LXPANEL_IS_DRAWER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LXPANEL_TYPE_DRAWER))
#define LXPANEL_IS_DRAWER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LXPANEL_TYPE_DRAWER))
#define LXPANEL_DRAWER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LXPANEL_TYPE_DRAWER, LxpanelDrawerClass))

typedef struct _LxpanelDrawer LxpanelDrawer;
typedef struct _LxpanelDrawerClass LxpanelDrawerClass;
typedef struct _LxpanelDrawerPrivate LxpanelDrawerPrivate;

#define LXPANEL_TYPE_POPUP (lxpanel_popup_get_type ())
#define LXPANEL_POPUP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LXPANEL_TYPE_POPUP, LxpanelPopup))
#define LXPANEL_POPUP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LXPANEL_TYPE_POPUP, LxpanelPopupClass))
#define LXPANEL_IS_POPUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LXPANEL_TYPE_POPUP))
#define LXPANEL_IS_POPUP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LXPANEL_TYPE_POPUP))
#define LXPANEL_POPUP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LXPANEL_TYPE_POPUP, LxpanelPopupClass))

typedef struct _LxpanelPopup LxpanelPopup;
typedef struct _LxpanelPopupClass LxpanelPopupClass;
typedef struct _LxpanelPopupPrivate LxpanelPopupPrivate;

#define UPOWER_TYPE_UPOWER (upower_upower_get_type ())
#define UPOWER_UPOWER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UPOWER_TYPE_UPOWER, UPowerUPower))
#define UPOWER_IS_UPOWER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UPOWER_TYPE_UPOWER))
#define UPOWER_UPOWER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), UPOWER_TYPE_UPOWER, UPowerUPowerIface))

typedef struct _UPowerUPower UPowerUPower;
typedef struct _UPowerUPowerIface UPowerUPowerIface;

#define UPOWER_TYPE_UPOWER_PROXY (upower_upower_proxy_get_type ())

#define UPOWER_TYPE_DEVICE (upower_device_get_type ())
#define UPOWER_DEVICE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UPOWER_TYPE_DEVICE, UPowerDevice))
#define UPOWER_IS_DEVICE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UPOWER_TYPE_DEVICE))
#define UPOWER_DEVICE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), UPOWER_TYPE_DEVICE, UPowerDeviceIface))

typedef struct _UPowerDevice UPowerDevice;
typedef struct _UPowerDeviceIface UPowerDeviceIface;

#define UPOWER_TYPE_DEVICE_PROXY (upower_device_proxy_get_type ())

#define GMARKUP_DOM_TYPE_DOC (gmarkup_dom_doc_get_type ())
#define GMARKUP_DOM_DOC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GMARKUP_DOM_TYPE_DOC, GMarkupDomDoc))
#define GMARKUP_DOM_DOC_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GMARKUP_DOM_TYPE_DOC, GMarkupDomDocClass))
#define GMARKUP_DOM_IS_DOC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GMARKUP_DOM_TYPE_DOC))
#define GMARKUP_DOM_IS_DOC_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GMARKUP_DOM_TYPE_DOC))
#define GMARKUP_DOM_DOC_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GMARKUP_DOM_TYPE_DOC, GMarkupDomDocClass))

typedef struct _GMarkupDomDoc GMarkupDomDoc;
typedef struct _GMarkupDomDocClass GMarkupDomDocClass;
typedef struct _GMarkupDomDocPrivate GMarkupDomDocPrivate;

#define GMARKUP_DOM_DOC_TYPE_FLAGS (gmarkup_dom_doc_flags_get_type ())

#define GMARKUP_DOM_TYPE_ATTRIBUTE (gmarkup_dom_attribute_get_type ())
typedef struct _GMarkupDomAttribute GMarkupDomAttribute;
typedef struct _LxpanelAppletModulePrivate LxpanelAppletModulePrivate;

#define LXPANEL_TYPE_APP_MENU_APPLET (lxpanel_app_menu_applet_get_type ())
#define LXPANEL_APP_MENU_APPLET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LXPANEL_TYPE_APP_MENU_APPLET, LxpanelAppMenuApplet))
#define LXPANEL_APP_MENU_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LXPANEL_TYPE_APP_MENU_APPLET, LxpanelAppMenuAppletClass))
#define LXPANEL_IS_APP_MENU_APPLET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LXPANEL_TYPE_APP_MENU_APPLET))
#define LXPANEL_IS_APP_MENU_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LXPANEL_TYPE_APP_MENU_APPLET))
#define LXPANEL_APP_MENU_APPLET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LXPANEL_TYPE_APP_MENU_APPLET, LxpanelAppMenuAppletClass))

typedef struct _LxpanelAppMenuApplet LxpanelAppMenuApplet;
typedef struct _LxpanelAppMenuAppletClass LxpanelAppMenuAppletClass;
typedef struct _LxpanelAppMenuAppletPrivate LxpanelAppMenuAppletPrivate;

#define LXPANEL_TYPE_BATTERY_APPLET (lxpanel_battery_applet_get_type ())
#define LXPANEL_BATTERY_APPLET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LXPANEL_TYPE_BATTERY_APPLET, LxpanelBatteryApplet))
#define LXPANEL_BATTERY_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LXPANEL_TYPE_BATTERY_APPLET, LxpanelBatteryAppletClass))
#define LXPANEL_IS_BATTERY_APPLET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LXPANEL_TYPE_BATTERY_APPLET))
#define LXPANEL_IS_BATTERY_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LXPANEL_TYPE_BATTERY_APPLET))
#define LXPANEL_BATTERY_APPLET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LXPANEL_TYPE_BATTERY_APPLET, LxpanelBatteryAppletClass))

typedef struct _LxpanelBatteryApplet LxpanelBatteryApplet;
typedef struct _LxpanelBatteryAppletClass LxpanelBatteryAppletClass;
typedef struct _LxpanelBatteryAppletPrivate LxpanelBatteryAppletPrivate;

#define LXPANEL_TYPE_BLANK_APPLET (lxpanel_blank_applet_get_type ())
#define LXPANEL_BLANK_APPLET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LXPANEL_TYPE_BLANK_APPLET, LxpanelBlankApplet))
#define LXPANEL_BLANK_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LXPANEL_TYPE_BLANK_APPLET, LxpanelBlankAppletClass))
#define LXPANEL_IS_BLANK_APPLET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LXPANEL_TYPE_BLANK_APPLET))
#define LXPANEL_IS_BLANK_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LXPANEL_TYPE_BLANK_APPLET))
#define LXPANEL_BLANK_APPLET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LXPANEL_TYPE_BLANK_APPLET, LxpanelBlankAppletClass))

typedef struct _LxpanelBlankApplet LxpanelBlankApplet;
typedef struct _LxpanelBlankAppletClass LxpanelBlankAppletClass;
typedef struct _LxpanelBlankAppletPrivate LxpanelBlankAppletPrivate;

#define LXPANEL_TYPE_CLOCK_APPLET (lxpanel_clock_applet_get_type ())
#define LXPANEL_CLOCK_APPLET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LXPANEL_TYPE_CLOCK_APPLET, LxpanelClockApplet))
#define LXPANEL_CLOCK_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LXPANEL_TYPE_CLOCK_APPLET, LxpanelClockAppletClass))
#define LXPANEL_IS_CLOCK_APPLET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LXPANEL_TYPE_CLOCK_APPLET))
#define LXPANEL_IS_CLOCK_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LXPANEL_TYPE_CLOCK_APPLET))
#define LXPANEL_CLOCK_APPLET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LXPANEL_TYPE_CLOCK_APPLET, LxpanelClockAppletClass))

typedef struct _LxpanelClockApplet LxpanelClockApplet;
typedef struct _LxpanelClockAppletClass LxpanelClockAppletClass;
typedef struct _LxpanelClockAppletPrivate LxpanelClockAppletPrivate;

#define LXPANEL_TYPE_LAUNCH_BUTTON (lxpanel_launch_button_get_type ())
#define LXPANEL_LAUNCH_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LXPANEL_TYPE_LAUNCH_BUTTON, LxpanelLaunchButton))
#define LXPANEL_LAUNCH_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LXPANEL_TYPE_LAUNCH_BUTTON, LxpanelLaunchButtonClass))
#define LXPANEL_IS_LAUNCH_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LXPANEL_TYPE_LAUNCH_BUTTON))
#define LXPANEL_IS_LAUNCH_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LXPANEL_TYPE_LAUNCH_BUTTON))
#define LXPANEL_LAUNCH_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LXPANEL_TYPE_LAUNCH_BUTTON, LxpanelLaunchButtonClass))

typedef struct _LxpanelLaunchButton LxpanelLaunchButton;
typedef struct _LxpanelLaunchButtonClass LxpanelLaunchButtonClass;
typedef struct _LxpanelLaunchButtonPrivate LxpanelLaunchButtonPrivate;

#define LXPANEL_LAUNCH_BUTTON_TYPE_TYPE (lxpanel_launch_button_type_get_type ())

#define LXPANEL_TYPE_LAUNCHBAR_APPLET (lxpanel_launchbar_applet_get_type ())
#define LXPANEL_LAUNCHBAR_APPLET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LXPANEL_TYPE_LAUNCHBAR_APPLET, LxpanelLaunchbarApplet))
#define LXPANEL_LAUNCHBAR_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LXPANEL_TYPE_LAUNCHBAR_APPLET, LxpanelLaunchbarAppletClass))
#define LXPANEL_IS_LAUNCHBAR_APPLET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LXPANEL_TYPE_LAUNCHBAR_APPLET))
#define LXPANEL_IS_LAUNCHBAR_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LXPANEL_TYPE_LAUNCHBAR_APPLET))
#define LXPANEL_LAUNCHBAR_APPLET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LXPANEL_TYPE_LAUNCHBAR_APPLET, LxpanelLaunchbarAppletClass))

typedef struct _LxpanelLaunchbarApplet LxpanelLaunchbarApplet;
typedef struct _LxpanelLaunchbarAppletClass LxpanelLaunchbarAppletClass;
typedef struct _LxpanelLaunchbarAppletPrivate LxpanelLaunchbarAppletPrivate;

#define LXPANEL_TYPE_NETSTATUS_APPLET (lxpanel_netstatus_applet_get_type ())
#define LXPANEL_NETSTATUS_APPLET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LXPANEL_TYPE_NETSTATUS_APPLET, LxpanelNetstatusApplet))
#define LXPANEL_NETSTATUS_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LXPANEL_TYPE_NETSTATUS_APPLET, LxpanelNetstatusAppletClass))
#define LXPANEL_IS_NETSTATUS_APPLET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LXPANEL_TYPE_NETSTATUS_APPLET))
#define LXPANEL_IS_NETSTATUS_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LXPANEL_TYPE_NETSTATUS_APPLET))
#define LXPANEL_NETSTATUS_APPLET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LXPANEL_TYPE_NETSTATUS_APPLET, LxpanelNetstatusAppletClass))

typedef struct _LxpanelNetstatusApplet LxpanelNetstatusApplet;
typedef struct _LxpanelNetstatusAppletClass LxpanelNetstatusAppletClass;
typedef struct _LxpanelNetstatusAppletPrivate LxpanelNetstatusAppletPrivate;

#define LXPANEL_TYPE_PAGER_APPLET (lxpanel_pager_applet_get_type ())
#define LXPANEL_PAGER_APPLET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LXPANEL_TYPE_PAGER_APPLET, LxpanelPagerApplet))
#define LXPANEL_PAGER_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LXPANEL_TYPE_PAGER_APPLET, LxpanelPagerAppletClass))
#define LXPANEL_IS_PAGER_APPLET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LXPANEL_TYPE_PAGER_APPLET))
#define LXPANEL_IS_PAGER_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LXPANEL_TYPE_PAGER_APPLET))
#define LXPANEL_PAGER_APPLET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LXPANEL_TYPE_PAGER_APPLET, LxpanelPagerAppletClass))

typedef struct _LxpanelPagerApplet LxpanelPagerApplet;
typedef struct _LxpanelPagerAppletClass LxpanelPagerAppletClass;
typedef struct _LxpanelPagerAppletPrivate LxpanelPagerAppletPrivate;

#define LXPANEL_TYPE_SHOW_DESKTOP_APPLET (lxpanel_show_desktop_applet_get_type ())
#define LXPANEL_SHOW_DESKTOP_APPLET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LXPANEL_TYPE_SHOW_DESKTOP_APPLET, LxpanelShowDesktopApplet))
#define LXPANEL_SHOW_DESKTOP_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LXPANEL_TYPE_SHOW_DESKTOP_APPLET, LxpanelShowDesktopAppletClass))
#define LXPANEL_IS_SHOW_DESKTOP_APPLET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LXPANEL_TYPE_SHOW_DESKTOP_APPLET))
#define LXPANEL_IS_SHOW_DESKTOP_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LXPANEL_TYPE_SHOW_DESKTOP_APPLET))
#define LXPANEL_SHOW_DESKTOP_APPLET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LXPANEL_TYPE_SHOW_DESKTOP_APPLET, LxpanelShowDesktopAppletClass))

typedef struct _LxpanelShowDesktopApplet LxpanelShowDesktopApplet;
typedef struct _LxpanelShowDesktopAppletClass LxpanelShowDesktopAppletClass;
typedef struct _LxpanelShowDesktopAppletPrivate LxpanelShowDesktopAppletPrivate;

#define LXPANEL_TYPE_WNCK_TASK_LIST_APPLET (lxpanel_wnck_task_list_applet_get_type ())
#define LXPANEL_WNCK_TASK_LIST_APPLET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LXPANEL_TYPE_WNCK_TASK_LIST_APPLET, LxpanelWnckTaskListApplet))
#define LXPANEL_WNCK_TASK_LIST_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LXPANEL_TYPE_WNCK_TASK_LIST_APPLET, LxpanelWnckTaskListAppletClass))
#define LXPANEL_IS_WNCK_TASK_LIST_APPLET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LXPANEL_TYPE_WNCK_TASK_LIST_APPLET))
#define LXPANEL_IS_WNCK_TASK_LIST_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LXPANEL_TYPE_WNCK_TASK_LIST_APPLET))
#define LXPANEL_WNCK_TASK_LIST_APPLET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LXPANEL_TYPE_WNCK_TASK_LIST_APPLET, LxpanelWnckTaskListAppletClass))

typedef struct _LxpanelWnckTaskListApplet LxpanelWnckTaskListApplet;
typedef struct _LxpanelWnckTaskListAppletClass LxpanelWnckTaskListAppletClass;
typedef struct _LxpanelWnckTaskListAppletPrivate LxpanelWnckTaskListAppletPrivate;

#define LXPANEL_TYPE_SYS_TRAY_APPLET (lxpanel_sys_tray_applet_get_type ())
#define LXPANEL_SYS_TRAY_APPLET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LXPANEL_TYPE_SYS_TRAY_APPLET, LxpanelSysTrayApplet))
#define LXPANEL_SYS_TRAY_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LXPANEL_TYPE_SYS_TRAY_APPLET, LxpanelSysTrayAppletClass))
#define LXPANEL_IS_SYS_TRAY_APPLET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LXPANEL_TYPE_SYS_TRAY_APPLET))
#define LXPANEL_IS_SYS_TRAY_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LXPANEL_TYPE_SYS_TRAY_APPLET))
#define LXPANEL_SYS_TRAY_APPLET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LXPANEL_TYPE_SYS_TRAY_APPLET, LxpanelSysTrayAppletClass))

typedef struct _LxpanelSysTrayApplet LxpanelSysTrayApplet;
typedef struct _LxpanelSysTrayAppletClass LxpanelSysTrayAppletClass;
typedef struct _LxpanelSysTrayAppletPrivate LxpanelSysTrayAppletPrivate;

#define LXPANEL_TYPE_PLACES_APPLET (lxpanel_places_applet_get_type ())
#define LXPANEL_PLACES_APPLET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), LXPANEL_TYPE_PLACES_APPLET, LxpanelPlacesApplet))
#define LXPANEL_PLACES_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), LXPANEL_TYPE_PLACES_APPLET, LxpanelPlacesAppletClass))
#define LXPANEL_IS_PLACES_APPLET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), LXPANEL_TYPE_PLACES_APPLET))
#define LXPANEL_IS_PLACES_APPLET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), LXPANEL_TYPE_PLACES_APPLET))
#define LXPANEL_PLACES_APPLET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), LXPANEL_TYPE_PLACES_APPLET, LxpanelPlacesAppletClass))

typedef struct _LxpanelPlacesApplet LxpanelPlacesApplet;
typedef struct _LxpanelPlacesAppletClass LxpanelPlacesAppletClass;
typedef struct _LxpanelPlacesAppletPrivate LxpanelPlacesAppletPrivate;

struct _LxpanelLxpanel {
	GObject parent_instance;
	LxpanelLxpanelPrivate * priv;
};

struct _LxpanelLxpanelClass {
	GObjectClass parent_class;
};

struct _LxpanelPanel {
	GtkWindow parent_instance;
	LxpanelPanelPrivate * priv;
};

struct _LxpanelPanelClass {
	GtkWindowClass parent_class;
};

typedef enum  {
	LXPANEL_PANEL_BACKGROUND_MODE_SYSTEM,
	LXPANEL_PANEL_BACKGROUND_MODE_WALLPAPER,
	LXPANEL_PANEL_BACKGROUND_MODE_IMAGE
} LxpanelPanelBackgroundMode;

struct _LxpanelAppletIface {
	GTypeInterface parent_iface;
	gboolean (*get_expand) (LxpanelApplet* self);
	void (*set_expand) (LxpanelApplet* self, gboolean expand);
	void (*set_panel) (LxpanelApplet* self, LxpanelPanel* panel);
	void (*set_panel_orientation) (LxpanelApplet* self, GtkOrientation orientation);
	void (*set_panel_position) (LxpanelApplet* self, GtkPositionType pos);
	void (*set_icon_size) (LxpanelApplet* self, gint size);
	LxpanelAppletInfo* (*get_info) (LxpanelApplet* self);
	gboolean (*load_config) (LxpanelApplet* self, GMarkupDomNode* config_node);
	void (*save_config) (LxpanelApplet* self, GMarkupDomNode* config_node);
};

struct _LxpanelAppletInfo {
	gint abi_version;
	GType type_id;
	gchar* type_name;
	gchar* name;
	gchar* version;
	gchar* description;
	gchar** authors;
	gint authors_length1;
	gchar* copyright;
	gboolean expandable;
	LxpanelAppletModule* module;
};

struct _LxpanelButton {
	GtkButton parent_instance;
	LxpanelButtonPrivate * priv;
};

struct _LxpanelButtonClass {
	GtkButtonClass parent_class;
};

struct _LxpanelMenuButton {
	LxpanelButton parent_instance;
	LxpanelMenuButtonPrivate * priv;
};

struct _LxpanelMenuButtonClass {
	LxpanelButtonClass parent_class;
};

struct _LxpanelDrawer {
	LxpanelButton parent_instance;
	LxpanelDrawerPrivate * priv;
	LxpanelPopup* popup;
};

struct _LxpanelDrawerClass {
	LxpanelButtonClass parent_class;
};

struct _LxpanelPopup {
	GtkWindow parent_instance;
	LxpanelPopupPrivate * priv;
};

struct _LxpanelPopupClass {
	GtkWindowClass parent_class;
};

struct _UPowerUPowerIface {
	GTypeInterface parent_iface;
	void (*enumerate_devices) (UPowerUPower* self, char*** devices, int* devices_length1, GError** error);
	gchar* (*get_daemon_version) (UPowerUPower* self);
	gboolean (*get_can_suspend) (UPowerUPower* self);
	gboolean (*get_can_hibernate) (UPowerUPower* self);
	gboolean (*get_on_battery) (UPowerUPower* self);
	gboolean (*get_on_low_battery) (UPowerUPower* self);
	gboolean (*get_lid_is_closed) (UPowerUPower* self);
	gboolean (*get_lid_is_present) (UPowerUPower* self);
	gboolean (*get_lid_force_sleep) (UPowerUPower* self);
	gboolean (*get_lid_docked) (UPowerUPower* self);
};

struct _UPowerDeviceIface {
	GTypeInterface parent_iface;
	void (*refresh) (UPowerDevice* self, GError** error);
	gchar* (*get_native_path) (UPowerDevice* self);
	gchar* (*get_vendor) (UPowerDevice* self);
	gchar* (*get_model) (UPowerDevice* self);
	gchar* (*get_serial) (UPowerDevice* self);
	gint64 (*get_update_time) (UPowerDevice* self);
	guint32 (*get_device_type) (UPowerDevice* self);
	gboolean (*get_power_supply) (UPowerDevice* self);
	gboolean (*get_has_history) (UPowerDevice* self);
	gboolean (*get_has_statistics) (UPowerDevice* self);
	gboolean (*get_online) (UPowerDevice* self);
	gdouble (*get_energy) (UPowerDevice* self);
	gdouble (*get_energy_empty) (UPowerDevice* self);
	gdouble (*get_energy_full) (UPowerDevice* self);
	gdouble (*get_energy_full_design) (UPowerDevice* self);
	gdouble (*get_energy_rate) (UPowerDevice* self);
	gdouble (*get_voltage) (UPowerDevice* self);
	gint64 (*get_time_to_empty) (UPowerDevice* self);
	gint64 (*get_time_to_full) (UPowerDevice* self);
	gdouble (*get_percentage) (UPowerDevice* self);
	gboolean (*get_is_present) (UPowerDevice* self);
	guint32 (*get_state) (UPowerDevice* self);
	gboolean (*get_is_rechargeable) (UPowerDevice* self);
	gdouble (*get_capacity) (UPowerDevice* self);
	guint32 (*get_technology) (UPowerDevice* self);
	gboolean (*get_recall_notice) (UPowerDevice* self);
	gchar* (*get_recall_vendor) (UPowerDevice* self);
	gchar* (*get_recall_url) (UPowerDevice* self);
};

struct _GMarkupDomDoc {
	GTypeInstance parent_instance;
	volatile int ref_count;
	GMarkupDomDocPrivate * priv;
	GMarkupDomNode* root;
};

struct _GMarkupDomDocClass {
	GTypeClass parent_class;
	void (*finalize) (GMarkupDomDoc *self);
};

typedef enum  {
	GMARKUP_DOM_DOC_FLAGS_PRESERVE_SPACE = 1 << 0
} GMarkupDomDocFlags;

struct _GMarkupDomAttribute {
	gchar* name;
	gchar* val;
};

struct _GMarkupDomNode {
	gchar* name;
	gchar* val;
	GMarkupDomNode* parent;
	GList* children;
	GMarkupDomAttribute* attributes;
	gint attributes_length1;
};

struct _LxpanelAppletModule {
	GTypeModule parent_instance;
	LxpanelAppletModulePrivate * priv;
};

struct _LxpanelAppletModuleClass {
	GTypeModuleClass parent_class;
};

struct _LxpanelAppMenuApplet {
	LxpanelMenuButton parent_instance;
	LxpanelAppMenuAppletPrivate * priv;
};

struct _LxpanelAppMenuAppletClass {
	LxpanelMenuButtonClass parent_class;
};

struct _LxpanelBatteryApplet {
	GtkBox parent_instance;
	LxpanelBatteryAppletPrivate * priv;
};

struct _LxpanelBatteryAppletClass {
	GtkBoxClass parent_class;
};

struct _LxpanelBlankApplet {
	GtkBox parent_instance;
	LxpanelBlankAppletPrivate * priv;
};

struct _LxpanelBlankAppletClass {
	GtkBoxClass parent_class;
};

struct _LxpanelClockApplet {
	GtkLabel parent_instance;
	LxpanelClockAppletPrivate * priv;
};

struct _LxpanelClockAppletClass {
	GtkLabelClass parent_class;
};

struct _LxpanelLaunchButton {
	LxpanelButton parent_instance;
	LxpanelLaunchButtonPrivate * priv;
};

struct _LxpanelLaunchButtonClass {
	LxpanelButtonClass parent_class;
};

typedef enum  {
	LXPANEL_LAUNCH_BUTTON_TYPE_NONE,
	LXPANEL_LAUNCH_BUTTON_TYPE_APP,
	LXPANEL_LAUNCH_BUTTON_TYPE_CUSTOM,
	LXPANEL_LAUNCH_BUTTON_TYPE_COMMAND
} LxpanelLaunchButtonType;

struct _LxpanelLaunchbarApplet {
	GtkBox parent_instance;
	LxpanelLaunchbarAppletPrivate * priv;
};

struct _LxpanelLaunchbarAppletClass {
	GtkBoxClass parent_class;
};

struct _LxpanelNetstatusApplet {
	GtkEventBox parent_instance;
	LxpanelNetstatusAppletPrivate * priv;
};

struct _LxpanelNetstatusAppletClass {
	GtkEventBoxClass parent_class;
	gboolean (*load_config) (LxpanelNetstatusApplet* self, GMarkupDomNode* config_node);
	void (*save_config) (LxpanelNetstatusApplet* self, GMarkupDomNode* config_node);
};

struct _LxpanelPagerApplet {
	WnckPager parent_instance;
	LxpanelPagerAppletPrivate * priv;
};

struct _LxpanelPagerAppletClass {
	WnckPagerClass parent_class;
};

struct _LxpanelShowDesktopApplet {
	LxpanelButton parent_instance;
	LxpanelShowDesktopAppletPrivate * priv;
};

struct _LxpanelShowDesktopAppletClass {
	LxpanelButtonClass parent_class;
};

struct _LxpanelWnckTaskListApplet {
	WnckTasklist parent_instance;
	LxpanelWnckTaskListAppletPrivate * priv;
};

struct _LxpanelWnckTaskListAppletClass {
	WnckTasklistClass parent_class;
};

struct _LxpanelSysTrayApplet {
	GtkFrame parent_instance;
	LxpanelSysTrayAppletPrivate * priv;
};

struct _LxpanelSysTrayAppletClass {
	GtkFrameClass parent_class;
};

struct _LxpanelPlacesApplet {
	LxpanelDrawer parent_instance;
	LxpanelPlacesAppletPrivate * priv;
};

struct _LxpanelPlacesAppletClass {
	LxpanelDrawerClass parent_class;
};


GType lxpanel_lxpanel_get_type (void) G_GNUC_CONST;
guint lxpanel_lxpanel_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
void lxpanel_lxpanel_run (LxpanelLxpanel* self);
void lxpanel_lxpanel_menu (LxpanelLxpanel* self);
LxpanelLxpanel* lxpanel_lxpanel_new (void);
LxpanelLxpanel* lxpanel_lxpanel_construct (GType object_type);
gint lxpanel_main (gchar** args, int args_length1);
GType lxpanel_panel_get_type (void) G_GNUC_CONST;
GType lxpanel_panel_background_mode_get_type (void) G_GNUC_CONST;
extern GList* lxpanel_panel_all_panels;
LxpanelPanel* lxpanel_panel_new (void);
LxpanelPanel* lxpanel_panel_construct (GType object_type);
void gmarkup_dom_node_free (GMarkupDomNode* self);
gboolean lxpanel_panel_load_panel (LxpanelPanel* self, GMarkupDomNode* node);
gboolean lxpanel_panel_save_panel (LxpanelPanel* self, GMarkupDomNode* node);
void lxpanel_applet_info_free (LxpanelAppletInfo* self);
GType lxpanel_applet_get_type (void) G_GNUC_CONST;
void lxpanel_panel_add_applet (LxpanelPanel* self, LxpanelApplet* applet);
void lxpanel_panel_insert_applet (LxpanelPanel* self, LxpanelApplet* applet, gint index);
void lxpanel_panel_reorder_applet (LxpanelPanel* self, LxpanelApplet* applet, gint index);
void lxpanel_panel_remove_applet (LxpanelPanel* self, LxpanelApplet* applet);
GtkBox* lxpanel_panel_get_box (LxpanelPanel* self);
WnckScreen* lxpanel_panel_get_wnck_screen (LxpanelPanel* self);
void lxpanel_panel_update_geometry (LxpanelPanel* self);
GtkPositionType lxpanel_panel_get_position (LxpanelPanel* self);
void lxpanel_panel_set_position (LxpanelPanel* self, GtkPositionType position);
gboolean lxpanel_panel_load_all_panels (const gchar* profile_name);
gboolean lxpanel_panel_save_all_panels (const gchar* profile_name);
GList* lxpanel_panel_get_applets (LxpanelPanel* self);
const gchar* lxpanel_panel_get_id (LxpanelPanel* self);
gint lxpanel_panel_get_icon_size (LxpanelPanel* self);
void lxpanel_panel_set_icon_size (LxpanelPanel* self, gint size);
const gchar* lxpanel_panel_get_text_color (LxpanelPanel* self);
const gchar* lxpanel_panel_get_font_desc (LxpanelPanel* self);
PangoAttrList* lxpanel_panel_get_text_attrs (LxpanelPanel* self);
const gchar* lxpanel_panel_get_file_manager (void);
const gchar* lxpanel_panel_get_logout_command (void);
GtkOrientation lxpanel_panel_get_orientation (LxpanelPanel* self);
void lxpanel_panel_set_orientation (LxpanelPanel* self, GtkOrientation value);
GType lxpanel_applet_module_get_type (void) G_GNUC_CONST;
LxpanelApplet* lxpanel_applet_info_create_new (LxpanelAppletInfo* self);
void lxpanel_applet_info_load_deatils (LxpanelAppletInfo* self);
LxpanelAppletInfo* lxpanel_applet_info_new (void);
LxpanelAppletInfo* lxpanel_applet_info_new (void);
gboolean lxpanel_applet_get_expand (LxpanelApplet* self);
void lxpanel_applet_set_expand (LxpanelApplet* self, gboolean expand);
void lxpanel_applet_set_panel (LxpanelApplet* self, LxpanelPanel* panel);
void lxpanel_applet_set_panel_orientation (LxpanelApplet* self, GtkOrientation orientation);
void lxpanel_applet_set_panel_position (LxpanelApplet* self, GtkPositionType pos);
void lxpanel_applet_set_icon_size (LxpanelApplet* self, gint size);
LxpanelAppletInfo* lxpanel_applet_get_info (LxpanelApplet* self);
LxpanelApplet* lxpanel_applet_new_from_type_name (const gchar* type_name);
gboolean lxpanel_applet_load_config (LxpanelApplet* self, GMarkupDomNode* config_node);
void lxpanel_applet_save_config (LxpanelApplet* self, GMarkupDomNode* config_node);
void lxpanel_applet_init (void);
GType lxpanel_button_get_type (void) G_GNUC_CONST;
LxpanelButton* lxpanel_button_new (void);
LxpanelButton* lxpanel_button_construct (GType object_type);
void lxpanel_button_set_icon_pixbuf (LxpanelButton* self, GdkPixbuf* pix);
GdkPixbuf* lxpanel_button_get_icon_pixbuf (LxpanelButton* self);
void lxpanel_button_set_gicon (LxpanelButton* self, GIcon* icon, gint size);
GIcon* lxpanel_button_get_gicon (LxpanelButton* self);
void lxpanel_button_set_gicon_size (LxpanelButton* self, gint size);
void lxpanel_button_set_label (LxpanelButton* self, const gchar* label);
void lxpanel_button_set_show_label (LxpanelButton* self, gboolean show);
gboolean lxpanel_button_get_show_label (LxpanelButton* self, gboolean show);
void lxpanel_button_get_menu_position (LxpanelButton* self, GtkWidget* menu, gint* x, gint* y, gboolean* push_in);
GtkOrientation lxpanel_button_get_orientation (LxpanelButton* self);
void lxpanel_button_set_orientation (LxpanelButton* self, GtkOrientation value);
GType lxpanel_menu_button_get_type (void) G_GNUC_CONST;
LxpanelMenuButton* lxpanel_menu_button_new (void);
LxpanelMenuButton* lxpanel_menu_button_construct (GType object_type);
void lxpanel_menu_button_set_menu (LxpanelMenuButton* self, GtkMenu* menu);
GtkMenu* lxpanel_menu_button_get_menu (LxpanelMenuButton* self);
GType lxpanel_drawer_get_type (void) G_GNUC_CONST;
GType lxpanel_popup_get_type (void) G_GNUC_CONST;
LxpanelDrawer* lxpanel_drawer_new (void);
LxpanelDrawer* lxpanel_drawer_construct (GType object_type);
LxpanelPopup* lxpanel_popup_new (void);
LxpanelPopup* lxpanel_popup_construct (GType object_type);
void lxpanel_popup_popup_for_device (LxpanelPopup* self, GdkDevice* device, GtkMenuPositionFunc func, void* func_target, guint button, guint32 time);
void lxpanel_popup_popup (LxpanelPopup* self, GtkMenuPositionFunc func, void* func_target, guint button, guint32 activate_time);
void lxpanel_popup_popdown (LxpanelPopup* self);
GType upower_upower_proxy_get_type (void) G_GNUC_CONST;
guint upower_upower_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType upower_upower_get_type (void) G_GNUC_CONST;
void upower_upower_enumerate_devices (UPowerUPower* self, char*** devices, int* devices_length1, GError** error);
gchar* upower_upower_get_daemon_version (UPowerUPower* self);
gboolean upower_upower_get_can_suspend (UPowerUPower* self);
gboolean upower_upower_get_can_hibernate (UPowerUPower* self);
gboolean upower_upower_get_on_battery (UPowerUPower* self);
gboolean upower_upower_get_on_low_battery (UPowerUPower* self);
gboolean upower_upower_get_lid_is_closed (UPowerUPower* self);
gboolean upower_upower_get_lid_is_present (UPowerUPower* self);
gboolean upower_upower_get_lid_force_sleep (UPowerUPower* self);
gboolean upower_upower_get_lid_docked (UPowerUPower* self);
GType upower_device_proxy_get_type (void) G_GNUC_CONST;
guint upower_device_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType upower_device_get_type (void) G_GNUC_CONST;
void upower_device_refresh (UPowerDevice* self, GError** error);
gchar* upower_device_get_native_path (UPowerDevice* self);
gchar* upower_device_get_vendor (UPowerDevice* self);
gchar* upower_device_get_model (UPowerDevice* self);
gchar* upower_device_get_serial (UPowerDevice* self);
gint64 upower_device_get_update_time (UPowerDevice* self);
guint32 upower_device_get_device_type (UPowerDevice* self);
gboolean upower_device_get_power_supply (UPowerDevice* self);
gboolean upower_device_get_has_history (UPowerDevice* self);
gboolean upower_device_get_has_statistics (UPowerDevice* self);
gboolean upower_device_get_online (UPowerDevice* self);
gdouble upower_device_get_energy (UPowerDevice* self);
gdouble upower_device_get_energy_empty (UPowerDevice* self);
gdouble upower_device_get_energy_full (UPowerDevice* self);
gdouble upower_device_get_energy_full_design (UPowerDevice* self);
gdouble upower_device_get_energy_rate (UPowerDevice* self);
gdouble upower_device_get_voltage (UPowerDevice* self);
gint64 upower_device_get_time_to_empty (UPowerDevice* self);
gint64 upower_device_get_time_to_full (UPowerDevice* self);
gdouble upower_device_get_percentage (UPowerDevice* self);
gboolean upower_device_get_is_present (UPowerDevice* self);
guint32 upower_device_get_state (UPowerDevice* self);
gboolean upower_device_get_is_rechargeable (UPowerDevice* self);
gdouble upower_device_get_capacity (UPowerDevice* self);
guint32 upower_device_get_technology (UPowerDevice* self);
gboolean upower_device_get_recall_notice (UPowerDevice* self);
gchar* upower_device_get_recall_vendor (UPowerDevice* self);
gchar* upower_device_get_recall_url (UPowerDevice* self);
gpointer gmarkup_dom_doc_ref (gpointer instance);
void gmarkup_dom_doc_unref (gpointer instance);
GParamSpec* gmarkup_dom_param_spec_doc (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void gmarkup_dom_value_set_doc (GValue* value, gpointer v_object);
void gmarkup_dom_value_take_doc (GValue* value, gpointer v_object);
gpointer gmarkup_dom_value_get_doc (const GValue* value);
GType gmarkup_dom_doc_get_type (void) G_GNUC_CONST;
GType gmarkup_dom_doc_flags_get_type (void) G_GNUC_CONST;
GMarkupDomDoc* gmarkup_dom_doc_new (void);
GMarkupDomDoc* gmarkup_dom_doc_construct (GType object_type);
gboolean gmarkup_dom_doc_load (GMarkupDomDoc* self, const gchar* path, GMarkupDomDocFlags flags);
gchar* gmarkup_dom_doc_to_string (GMarkupDomDoc* self);
gboolean gmarkup_dom_doc_save (GMarkupDomDoc* self, const gchar* path);
GType gmarkup_dom_attribute_get_type (void) G_GNUC_CONST;
GMarkupDomAttribute* gmarkup_dom_attribute_dup (const GMarkupDomAttribute* self);
void gmarkup_dom_attribute_free (GMarkupDomAttribute* self);
void gmarkup_dom_attribute_copy (const GMarkupDomAttribute* self, GMarkupDomAttribute* dest);
void gmarkup_dom_attribute_destroy (GMarkupDomAttribute* self);
GMarkupDomNode* gmarkup_dom_node_new (GMarkupDomNode* parent, const gchar* name, gchar** attr_names, int attr_names_length1, gchar** attr_values, int attr_values_length1);
GMarkupDomNode* gmarkup_dom_node_new (GMarkupDomNode* parent, const gchar* name, gchar** attr_names, int attr_names_length1, gchar** attr_values, int attr_values_length1);
GMarkupDomNode* gmarkup_dom_node_get_child_by_name (GMarkupDomNode* self, const gchar* name);
const gchar* gmarkup_dom_node_get_attribute (GMarkupDomNode* self, const gchar* name);
GMarkupDomNode* gmarkup_dom_node_new_child (GMarkupDomNode* self, const gchar* name, const gchar* val, gchar** attr_names, int attr_names_length1, gchar** attr_vals, int attr_vals_length1);
void gmarkup_dom_node_to_string (GMarkupDomNode* self, GString** buf, gint depth);
gpointer lxpanel_enum_nick_parse (GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func, const gchar* str);
gpointer lxpanel_enum_name_parse (GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func, const gchar* str);
const gchar* lxpanel_enum_to_nick (GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func, gint enum_val);
GdkPixbuf* lxpanel_spotlight_pixbuf (GdkPixbuf* pix);
LxpanelAppletModule* lxpanel_applet_module_new (const gchar* name, const gchar* file);
LxpanelAppletModule* lxpanel_applet_module_construct (GType object_type, const gchar* name, const gchar* file);
LxpanelAppletModule* lxpanel_applet_module_from_name (const gchar* name);
const gchar* lxpanel_applet_module_get_name (LxpanelAppletModule* self);
const gchar* lxpanel_applet_module_get_filename (LxpanelAppletModule* self);
gboolean lxpanel_applet_module_is_loaded (LxpanelAppletModule* self);
LxpanelAppletInfo* lxpanel_applet_module_build_applet_info (LxpanelAppletModule* self);
GType lxpanel_app_menu_applet_get_type (void) G_GNUC_CONST;
LxpanelAppletInfo* lxpanel_app_menu_applet_build_info (void);
LxpanelAppMenuApplet* lxpanel_app_menu_applet_new (void);
LxpanelAppMenuApplet* lxpanel_app_menu_applet_construct (GType object_type);
GType lxpanel_battery_applet_get_type (void) G_GNUC_CONST;
LxpanelAppletInfo* lxpanel_battery_applet_build_info (void);
LxpanelBatteryApplet* lxpanel_battery_applet_new (void);
LxpanelBatteryApplet* lxpanel_battery_applet_construct (GType object_type);
GType lxpanel_blank_applet_get_type (void) G_GNUC_CONST;
LxpanelAppletInfo* lxpanel_blank_applet_build_info (void);
LxpanelBlankApplet* lxpanel_blank_applet_new (void);
LxpanelBlankApplet* lxpanel_blank_applet_construct (GType object_type);
GType lxpanel_clock_applet_get_type (void) G_GNUC_CONST;
LxpanelAppletInfo* lxpanel_clock_applet_build_info (void);
LxpanelClockApplet* lxpanel_clock_applet_new (void);
LxpanelClockApplet* lxpanel_clock_applet_construct (GType object_type);
GType lxpanel_launch_button_get_type (void) G_GNUC_CONST;
GType lxpanel_launch_button_type_get_type (void) G_GNUC_CONST;
LxpanelLaunchButton* lxpanel_launch_button_new (LxpanelLaunchButtonType type);
LxpanelLaunchButton* lxpanel_launch_button_construct (GType object_type, LxpanelLaunchButtonType type);
LxpanelLaunchButtonType lxpanel_launch_button_get_button_type (LxpanelLaunchButton* self);
void lxpanel_launch_button_set_desktop_id (LxpanelLaunchButton* self, const gchar* id);
const gchar* lxpanel_launch_button_get_desktop_id (LxpanelLaunchButton* self);
void lxpanel_launch_button_set_command_exec (LxpanelLaunchButton* self, const gchar* exec);
const gchar* lxpanel_launch_button_get_command_exec (LxpanelLaunchButton* self);
void lxpanel_launch_button_set_terminal (LxpanelLaunchButton* self, gboolean terminal);
gboolean lxpanel_launch_button_get_terminal (LxpanelLaunchButton* self);
GType lxpanel_launchbar_applet_get_type (void) G_GNUC_CONST;
LxpanelAppletInfo* lxpanel_launchbar_applet_build_info (void);
LxpanelLaunchbarApplet* lxpanel_launchbar_applet_new (void);
LxpanelLaunchbarApplet* lxpanel_launchbar_applet_construct (GType object_type);
GType lxpanel_netstatus_applet_get_type (void) G_GNUC_CONST;
gboolean lxpanel_netstatus_applet_load_config (LxpanelNetstatusApplet* self, GMarkupDomNode* config_node);
void lxpanel_netstatus_applet_save_config (LxpanelNetstatusApplet* self, GMarkupDomNode* config_node);
LxpanelAppletInfo* lxpanel_netstatus_applet_build_info (void);
LxpanelNetstatusApplet* lxpanel_netstatus_applet_new (void);
LxpanelNetstatusApplet* lxpanel_netstatus_applet_construct (GType object_type);
GType lxpanel_pager_applet_get_type (void) G_GNUC_CONST;
LxpanelAppletInfo* lxpanel_pager_applet_build_info (void);
LxpanelPagerApplet* lxpanel_pager_applet_new (void);
LxpanelPagerApplet* lxpanel_pager_applet_construct (GType object_type);
GtkOrientation lxpanel_pager_applet_get_orientation (LxpanelPagerApplet* self);
void lxpanel_pager_applet_set_orientation (LxpanelPagerApplet* self, GtkOrientation value);
GType lxpanel_show_desktop_applet_get_type (void) G_GNUC_CONST;
LxpanelAppletInfo* lxpanel_show_desktop_applet_build_info (void);
LxpanelShowDesktopApplet* lxpanel_show_desktop_applet_new (void);
LxpanelShowDesktopApplet* lxpanel_show_desktop_applet_construct (GType object_type);
GType lxpanel_wnck_task_list_applet_get_type (void) G_GNUC_CONST;
LxpanelWnckTaskListApplet* lxpanel_wnck_task_list_applet_new (void);
LxpanelWnckTaskListApplet* lxpanel_wnck_task_list_applet_construct (GType object_type);
GType lxpanel_sys_tray_applet_get_type (void) G_GNUC_CONST;
LxpanelAppletInfo* lxpanel_sys_tray_applet_build_info (void);
LxpanelSysTrayApplet* lxpanel_sys_tray_applet_new (void);
LxpanelSysTrayApplet* lxpanel_sys_tray_applet_construct (GType object_type);
GtkOrientation lxpanel_sys_tray_applet_get_orientation (LxpanelSysTrayApplet* self);
void lxpanel_sys_tray_applet_set_orientation (LxpanelSysTrayApplet* self, GtkOrientation value);
GType lxpanel_places_applet_get_type (void) G_GNUC_CONST;
LxpanelAppletInfo* lxpanel_places_applet_build_info (void);
LxpanelPlacesApplet* lxpanel_places_applet_new (void);
LxpanelPlacesApplet* lxpanel_places_applet_construct (GType object_type);


G_END_DECLS

#endif
