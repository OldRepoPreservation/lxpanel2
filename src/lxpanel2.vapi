/* lxpanel2.vapi generated by valac 0.16.0, do not modify. */

namespace Lxpanel {
	[CCode (cheader_filename = "lxpanel2.h")]
	public class AppMenuApplet : global::Lxpanel.MenuButton, global::Lxpanel.Applet {
		public AppMenuApplet ();
		public static global::Lxpanel.AppletInfo build_info ();
		protected override void dispose ();
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	[Compact]
	public class AppletInfo {
		public int abi_version;
		public string[] authors;
		public string? copyright;
		public string? description;
		public bool expandable;
		public weak global::Lxpanel.AppletModule? module;
		public string? name;
		public GLib.Type type_id;
		public string type_name;
		public string? version;
		public AppletInfo ();
		public global::Lxpanel.Applet? create_new ();
		public void load_deatils ();
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	public class AppletModule : GLib.TypeModule {
		public AppletModule (string name, string file);
		public global::Lxpanel.AppletInfo build_applet_info ();
		public static global::Lxpanel.AppletModule? from_name (string name);
		public unowned string? get_filename ();
		public unowned string? get_name ();
		public bool is_loaded ();
		public override bool load ();
		public override void unload ();
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	public class BatteryApplet : Gtk.Box, global::Lxpanel.Applet {
		public BatteryApplet ();
		public static global::Lxpanel.AppletInfo build_info ();
		public override void dispose ();
		protected override bool draw (Cairo.Context cr);
		protected override void get_preferred_width_for_height (int height, out int min_width, out int natral_width);
		protected override Gtk.SizeRequestMode get_request_mode ();
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	public class BlankApplet : Gtk.Box, global::Lxpanel.Applet {
		public BlankApplet ();
		public static global::Lxpanel.AppletInfo build_info ();
		protected override void get_preferred_height (out int min, out int natral);
		protected override void get_preferred_width (out int min, out int natral);
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	public class Button : Gtk.Button, Gtk.Orientable {
		public Button ();
		protected override void add (Gtk.Widget child);
		protected override bool draw (Cairo.Context cr);
		public unowned GLib.Icon? get_gicon ();
		public unowned Gdk.Pixbuf? get_icon_pixbuf ();
		protected void get_menu_position (Gtk.Widget menu, out int x, out int y, out bool push_in);
		protected override void get_preferred_height (out int min, out int natral);
		protected override void get_preferred_width (out int min, out int natral);
		public bool get_show_label (bool show);
		public void set_gicon (GLib.Icon icon, int size);
		public void set_gicon_size (int size);
		public void set_icon_pixbuf (Gdk.Pixbuf pix);
		public new void set_label (string label);
		public void set_show_label (bool show);
		protected override void size_allocate (Gtk.Allocation allocation);
		public Gtk.Orientation orientation { get; set; }
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	public class ClockApplet : Gtk.Label, global::Lxpanel.Applet {
		public ClockApplet ();
		public static global::Lxpanel.AppletInfo build_info ();
		protected override void dispose ();
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	public class Drawer : global::Lxpanel.Button {
		protected global::Lxpanel.Popup? popup;
		public Drawer ();
		protected override void clicked ();
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	public class LaunchButton : global::Lxpanel.Button {
		public enum Type {
			NONE,
			APP,
			CUSTOM,
			COMMAND
		}
		public LaunchButton (global::Lxpanel.LaunchButton.Type type);
		protected override void clicked ();
		public global::Lxpanel.LaunchButton.Type get_button_type ();
		public unowned string get_command_exec ();
		public unowned string get_desktop_id ();
		public bool get_terminal ();
		public void set_command_exec (string exec);
		public void set_desktop_id (string id);
		public void set_terminal (bool terminal);
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	public class LaunchbarApplet : Gtk.Box, global::Lxpanel.Applet {
		public LaunchbarApplet ();
		public static global::Lxpanel.AppletInfo build_info ();
		public override void size_allocate (Gtk.Allocation allocation);
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	[DBus (name = "org.lxde.Lxpanel")]
	public class Lxpanel : GLib.Object {
		public Lxpanel ();
		public void menu ();
		public void run ();
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	public class MenuButton : global::Lxpanel.Button {
		public MenuButton ();
		protected override void clicked ();
		public unowned Gtk.Menu get_menu ();
		public void set_menu (Gtk.Menu menu);
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	public class NetstatusApplet : Gtk.EventBox, global::Lxpanel.Applet {
		public NetstatusApplet ();
		public static global::Lxpanel.AppletInfo build_info ();
		public override void dispose ();
		public virtual bool load_config (GMarkupDom.Node config_node);
		public override void realize ();
		public virtual void save_config (GMarkupDom.Node config_node);
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	public class PagerApplet : Wnck.Pager, global::Lxpanel.Applet, Gtk.Orientable {
		public PagerApplet ();
		public static global::Lxpanel.AppletInfo build_info ();
		public override void get_preferred_height (out int min_h, out int natral_h);
		public override void get_preferred_width (out int min_w, out int natral_w);
		public Gtk.Orientation orientation { get; set; }
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	public class Panel : Gtk.Window, Gtk.Orientable {
		public enum BackgroundMode {
			SYSTEM,
			WALLPAPER,
			IMAGE
		}
		public static GLib.List<global::Lxpanel.Panel> all_panels;
		public Panel ();
		public void add_applet (global::Lxpanel.Applet applet);
		protected override void dispose ();
		protected override bool draw (Cairo.Context cr);
		public GLib.List<weak global::Lxpanel.Applet> get_applets ();
		public unowned Gtk.Box get_box ();
		public static unowned string? get_file_manager ();
		public unowned string? get_font_desc ();
		public int get_icon_size ();
		public unowned string? get_id ();
		public static unowned string? get_logout_command ();
		public Gtk.PositionType get_position ();
		protected override void get_preferred_height (out int min, out int natural);
		protected override void get_preferred_width (out int min, out int natural);
		public unowned Pango.AttrList? get_text_attrs ();
		public unowned string? get_text_color ();
		public unowned Wnck.Screen get_wnck_screen ();
		public void insert_applet (global::Lxpanel.Applet applet, int index);
		public static bool load_all_panels (string profile_name);
		public bool load_panel (GMarkupDom.Node node);
		public void remove_applet (global::Lxpanel.Applet applet);
		public void reorder_applet (global::Lxpanel.Applet applet, int index);
		public static bool save_all_panels (string profile_name);
		public bool save_panel (GMarkupDom.Node node);
		public void set_icon_size (int size);
		public void set_position (Gtk.PositionType position);
		protected override void size_allocate (Gtk.Allocation allocation);
		public void update_geometry ();
		public Gtk.Orientation orientation { get; set; }
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	public class PlacesApplet : global::Lxpanel.Drawer, global::Lxpanel.Applet {
		public PlacesApplet ();
		public static global::Lxpanel.AppletInfo build_info ();
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	public class Popup : Gtk.Window {
		public Popup ();
		protected override bool button_press_event (Gdk.EventButton evt);
		protected override bool draw (Cairo.Context cr);
		protected override bool map_event (Gdk.EventAny evt);
		public void popdown ();
		public void popup (Gtk.MenuPositionFunc func, uint button, uint32 activate_time);
		public void popup_for_device (Gdk.Device device, Gtk.MenuPositionFunc func, uint button, uint32 time);
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	public class ShowDesktopApplet : global::Lxpanel.Button, global::Lxpanel.Applet {
		public ShowDesktopApplet ();
		public static global::Lxpanel.AppletInfo build_info ();
		protected override void clicked ();
		public override Gtk.SizeRequestMode get_request_mode ();
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	public class SysTrayApplet : Gtk.Frame, global::Lxpanel.Applet {
		public SysTrayApplet ();
		public static global::Lxpanel.AppletInfo build_info ();
		protected override void screen_changed (Gdk.Screen prev);
		public Gtk.Orientation orientation { get; set; }
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	public class WnckTaskListApplet : Wnck.Tasklist, global::Lxpanel.Applet {
		public WnckTaskListApplet ();
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	public interface Applet : Gtk.Widget {
		public virtual bool get_expand ();
		public virtual unowned global::Lxpanel.AppletInfo get_info ();
		public static void init ();
		public virtual bool load_config (GMarkupDom.Node config_node);
		public static global::Lxpanel.Applet? new_from_type_name (string type_name);
		public virtual void save_config (GMarkupDom.Node config_node);
		public virtual void set_expand (bool expand);
		public virtual void set_icon_size (int size);
		public virtual void set_panel (global::Lxpanel.Panel panel);
		public virtual void set_panel_orientation (Gtk.Orientation orientation);
		public virtual void set_panel_position (Gtk.PositionType pos);
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	public static G enum_name_parse<G> (string str);
	[CCode (cheader_filename = "lxpanel2.h")]
	public static G enum_nick_parse<G> (string str);
	[CCode (cheader_filename = "lxpanel2.h")]
	public static unowned string enum_to_nick<G> (int enum_val);
	[CCode (cheader_filename = "lxpanel2.h")]
	public static int main (string[] args);
	[CCode (cheader_filename = "lxpanel2.h")]
	public static Gdk.Pixbuf? spotlight_pixbuf (Gdk.Pixbuf pix);
}
namespace UPower {
	[CCode (cheader_filename = "lxpanel2.h")]
	[DBus (name = "org.freedesktop.UPower.Device")]
	public interface Device : GLib.Object {
		public abstract void refresh () throws GLib.IOError;
		public abstract double capacity { get; }
		[DBus (name = "Type")]
		public abstract uint32 device_type { get; }
		public abstract double energy { get; }
		public abstract double energy_empty { get; }
		public abstract double energy_full { get; }
		public abstract double energy_full_design { get; }
		public abstract double energy_rate { get; }
		public abstract bool has_history { get; }
		public abstract bool has_statistics { get; }
		public abstract bool is_present { get; }
		public abstract bool is_rechargeable { get; }
		public abstract string model { owned get; }
		public abstract string native_path { owned get; }
		public abstract bool online { get; }
		public abstract double percentage { get; }
		public abstract bool power_supply { get; }
		public abstract bool recall_notice { get; }
		public abstract string recall_url { owned get; }
		public abstract string recall_vendor { owned get; }
		public abstract string serial { owned get; }
		public abstract uint32 state { get; }
		public abstract uint32 technology { get; }
		public abstract int64 time_to_empty { get; }
		public abstract int64 time_to_full { get; }
		public abstract int64 update_time { get; }
		public abstract string vendor { owned get; }
		public abstract double voltage { get; }
		public signal void changed ();
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	[DBus (name = "org.freedesktop.UPower")]
	public interface UPower : GLib.Object {
		public abstract void enumerate_devices (out GLib.ObjectPath[] devices) throws GLib.IOError;
		public abstract bool can_hibernate { get; }
		public abstract bool can_suspend { get; }
		public abstract string daemon_version { owned get; }
		public abstract bool lid_docked { get; }
		public abstract bool lid_force_sleep { get; }
		public abstract bool lid_is_closed { get; }
		public abstract bool lid_is_present { get; }
		public abstract bool on_battery { get; }
		public abstract bool on_low_battery { get; }
		public signal void changed ();
		public signal void device_added (GLib.ObjectPath device);
		public signal void device_changed (GLib.ObjectPath device);
		public signal void device_removed (GLib.ObjectPath device);
		public signal void notify_resume (string action);
		public signal void notify_sleep (string action);
		public signal void resuming ();
		public signal void sleeping ();
	}
}
namespace GMarkupDom {
	[CCode (cheader_filename = "lxpanel2.h")]
	public class Doc {
		[Flags]
		public enum Flags {
			PRESERVE_SPACE
		}
		public GMarkupDom.Node root;
		public Doc ();
		public bool load (string path, GMarkupDom.Doc.Flags flags = 0);
		public bool save (string path);
		public string to_string ();
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	[Compact]
	public class Node {
		public GMarkupDom.Attribute[] attributes;
		public GLib.List<GMarkupDom.Node> children;
		public string? name;
		public weak GMarkupDom.Node? parent;
		public string? val;
		public Node (GMarkupDom.Node? parent, string? name, string[] attr_names, string[] attr_values);
		public unowned string? get_attribute (string name);
		public unowned GMarkupDom.Node? get_child_by_name (string name);
		public unowned GMarkupDom.Node new_child (string? name, string? val = null, string[]? attr_names = null, string[]? attr_vals = null);
		public void to_string (ref GLib.StringBuilder buf, int depth = 0);
	}
	[CCode (cheader_filename = "lxpanel2.h")]
	public struct Attribute {
		public string name;
		public string val;
	}
}
